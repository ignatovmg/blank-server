#!/usr/bin/env python

CACHE_FILE = '.local_params'


def get_params_file():
    import json
    import random
    import string

    DEFAULTS = {
        "EMAIL_USER": '',
        "EMAIL_PASS": '',
        "EMAIL_HOST": 'smtp.gmail.com',
        "LOCAL_PORT": '8080',
        "SECRET_KEY": '',
        "FLOWER_USER": 'flower',
        "FLOWER_PASS": ''
    }

    with open(CACHE_FILE, "r") as f:
        params = json.load(f)

    for key, default in DEFAULTS.items():
        if key == 'SECRET_KEY' and params.get(key, '') == '':
            print('Generating the server secret key')
            length = random.randint(50, 70)
            params[key] = ''.join([random.choice(string.printable) for _ in range(length)])

        if key == 'FLOWER_PASS' and params.get(key, '') == '':
            print('Generating the password for Flower (tasks monitoring)')
            length = random.randint(10, 15)
            params[key] = ''.join([random.choice(string.ascii_letters + string.digits) for _ in range(length)])

        if params.get(key, '') == '':
            print('Setting the default value for %s (%s), set it manually in %s to change this behavior' % (key, default, CACHE_FILE))
            params[key] = default

    with open(CACHE_FILE, "w") as f:
        json.dump(params, f, indent=4)
        print('Dumping generated values back to %s\n' % CACHE_FILE)

    return params


def main():
    import os

    try:
        params = get_params_file()
        print('Read parameters from cached parameter file ' + CACHE_FILE)
    except OSError:
        print('Copy .local_params_example to %s and set the appropriate fields' % CACHE_FILE)
        return 1
    except Exception:
        raise

    os.environ.update(params)

    from compose.cli.main import main as compose_main
    sys.argv[:] = ['docker-compose'] + sys.argv[1:]
    compose_main()
    return 0


if __name__ == '__main__':
    import sys

    sys.exit(main())
